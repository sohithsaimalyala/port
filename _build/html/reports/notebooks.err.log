Traceback (most recent call last):
  File "/opt/anaconda3/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/asyncio/base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Import required libraries
import sqlite3
import pandas as pd

# Step 1: Load the dataset
data_path = "Housing.csv"
data = pd.read_csv(data_path)

# Inspect the dataset
print("Dataset Columns:")
print(data.columns)

# Step 2: Create SQLite database and tables
conn = sqlite3.connect("housing.db")
cursor = conn.cursor()

# Table: PropertyDetails
cursor.execute("""
CREATE TABLE IF NOT EXISTS PropertyDetails (
    Area REAL,
    Bedrooms INTEGER,
    Bathrooms INTEGER,
    Stories INTEGER,
    Parking INTEGER,
    Price REAL
)
""")

# Table: Amenities
cursor.execute("""
CREATE TABLE IF NOT EXISTS Amenities (
    RowID INTEGER PRIMARY KEY AUTOINCREMENT,
    MainRoad BOOLEAN,
    GuestRoom BOOLEAN,
    Basement BOOLEAN,
    HotWaterHeating BOOLEAN,
    AirConditioning BOOLEAN,
    PrefArea BOOLEAN
)
""")

# Table: Furnishing
cursor.execute("""
CREATE TABLE IF NOT EXISTS Furnishing (
    RowID INTEGER PRIMARY KEY AUTOINCREMENT,
    FurnishingStatus TEXT
)
""")

conn.commit()
print("Database schema created successfully.")

# Step 3: Populate the PropertyDetails table
property_details = data[['area', 'bedrooms', 'bathrooms', 'stories', 'parking', 'price']]
property_details.to_sql('PropertyDetails', conn, if_exists='replace', index=True)  # Save with default rowid

# Step 4: Populate the Amenities table
amenities = data[['mainroad', 'guestroom', 'basement', 'hotwaterheating', 'airconditioning', 'prefarea']]
amenities.to_sql('Amenities', conn, if_exists='replace', index=True)

# Step 5: Populate the Furnishing table
furnishing = data[['furnishingstatus']]
furnishing.to_sql('Furnishing', conn, if_exists='replace', index=True)

print("Data populated successfully into normalized database.")

# Step 6: Verify the database with a joined query
query = """
SELECT pd.rowid AS PropertyID, pd.Area, pd.Bedrooms, pd.Bathrooms, pd.Stories, pd.Parking, pd.Price,
       a.MainRoad, a.GuestRoom, a.Basement, a.HotWaterHeating, a.AirConditioning, a.PrefArea,
       f.FurnishingStatus
FROM PropertyDetails pd
JOIN Amenities a ON pd.rowid = a.rowid
JOIN Furnishing f ON pd.rowid = f.rowid
"""
result = pd.read_sql_query(query, conn)

print("Joined Data:")
print(result.head())

# Step 7: Close the connection
conn.close()

------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mFileNotFoundError[0m                         Traceback (most recent call last)
Cell [0;32mIn[1], line 7[0m
[1;32m      5[0m [38;5;66;03m# Step 1: Load the dataset[39;00m
[1;32m      6[0m data_path [38;5;241m=[39m [38;5;124m"[39m[38;5;124mHousing.csv[39m[38;5;124m"[39m
[0;32m----> 7[0m data [38;5;241m=[39m pd[38;5;241m.[39mread_csv(data_path)
[1;32m      9[0m [38;5;66;03m# Inspect the dataset[39;00m
[1;32m     10[0m [38;5;28mprint[39m([38;5;124m"[39m[38;5;124mDataset Columns:[39m[38;5;124m"[39m)

File [0;32m/opt/anaconda3/lib/python3.12/site-packages/pandas/io/parsers/readers.py:1026[0m, in [0;36mread_csv[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)[0m
[1;32m   1013[0m kwds_defaults [38;5;241m=[39m _refine_defaults_read(
[1;32m   1014[0m     dialect,
[1;32m   1015[0m     delimiter,
[0;32m   (...)[0m
[1;32m   1022[0m     dtype_backend[38;5;241m=[39mdtype_backend,
[1;32m   1023[0m )
[1;32m   1024[0m kwds[38;5;241m.[39mupdate(kwds_defaults)
[0;32m-> 1026[0m [38;5;28;01mreturn[39;00m _read(filepath_or_buffer, kwds)

File [0;32m/opt/anaconda3/lib/python3.12/site-packages/pandas/io/parsers/readers.py:620[0m, in [0;36m_read[0;34m(filepath_or_buffer, kwds)[0m
[1;32m    617[0m _validate_names(kwds[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mnames[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m))
[1;32m    619[0m [38;5;66;03m# Create the parser.[39;00m
[0;32m--> 620[0m parser [38;5;241m=[39m TextFileReader(filepath_or_buffer, [38;5;241m*[39m[38;5;241m*[39mkwds)
[1;32m    622[0m [38;5;28;01mif[39;00m chunksize [38;5;129;01mor[39;00m iterator:
[1;32m    623[0m     [38;5;28;01mreturn[39;00m parser

File [0;32m/opt/anaconda3/lib/python3.12/site-packages/pandas/io/parsers/readers.py:1620[0m, in [0;36mTextFileReader.__init__[0;34m(self, f, engine, **kwds)[0m
[1;32m   1617[0m     [38;5;28mself[39m[38;5;241m.[39moptions[[38;5;124m"[39m[38;5;124mhas_index_names[39m[38;5;124m"[39m] [38;5;241m=[39m kwds[[38;5;124m"[39m[38;5;124mhas_index_names[39m[38;5;124m"[39m]
[1;32m   1619[0m [38;5;28mself[39m[38;5;241m.[39mhandles: IOHandles [38;5;241m|[39m [38;5;28;01mNone[39;00m [38;5;241m=[39m [38;5;28;01mNone[39;00m
[0;32m-> 1620[0m [38;5;28mself[39m[38;5;241m.[39m_engine [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_make_engine(f, [38;5;28mself[39m[38;5;241m.[39mengine)

File [0;32m/opt/anaconda3/lib/python3.12/site-packages/pandas/io/parsers/readers.py:1880[0m, in [0;36mTextFileReader._make_engine[0;34m(self, f, engine)[0m
[1;32m   1878[0m     [38;5;28;01mif[39;00m [38;5;124m"[39m[38;5;124mb[39m[38;5;124m"[39m [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m mode:
[1;32m   1879[0m         mode [38;5;241m+[39m[38;5;241m=[39m [38;5;124m"[39m[38;5;124mb[39m[38;5;124m"[39m
[0;32m-> 1880[0m [38;5;28mself[39m[38;5;241m.[39mhandles [38;5;241m=[39m get_handle(
[1;32m   1881[0m     f,
[1;32m   1882[0m     mode,
[1;32m   1883[0m     encoding[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39moptions[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mencoding[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m),
[1;32m   1884[0m     compression[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39moptions[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mcompression[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m),
[1;32m   1885[0m     memory_map[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39moptions[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mmemory_map[39m[38;5;124m"[39m, [38;5;28;01mFalse[39;00m),
[1;32m   1886[0m     is_text[38;5;241m=[39mis_text,
[1;32m   1887[0m     errors[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39moptions[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mencoding_errors[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124mstrict[39m[38;5;124m"[39m),
[1;32m   1888[0m     storage_options[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39moptions[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mstorage_options[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m),
[1;32m   1889[0m )
[1;32m   1890[0m [38;5;28;01massert[39;00m [38;5;28mself[39m[38;5;241m.[39mhandles [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m
[1;32m   1891[0m f [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mhandles[38;5;241m.[39mhandle

File [0;32m/opt/anaconda3/lib/python3.12/site-packages/pandas/io/common.py:873[0m, in [0;36mget_handle[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)[0m
[1;32m    868[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(handle, [38;5;28mstr[39m):
[1;32m    869[0m     [38;5;66;03m# Check whether the filename is to be opened in binary mode.[39;00m
[1;32m    870[0m     [38;5;66;03m# Binary mode does not support 'encoding' and 'newline'.[39;00m
[1;32m    871[0m     [38;5;28;01mif[39;00m ioargs[38;5;241m.[39mencoding [38;5;129;01mand[39;00m [38;5;124m"[39m[38;5;124mb[39m[38;5;124m"[39m [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m ioargs[38;5;241m.[39mmode:
[1;32m    872[0m         [38;5;66;03m# Encoding[39;00m
[0;32m--> 873[0m         handle [38;5;241m=[39m [38;5;28mopen[39m(
[1;32m    874[0m             handle,
[1;32m    875[0m             ioargs[38;5;241m.[39mmode,
[1;32m    876[0m             encoding[38;5;241m=[39mioargs[38;5;241m.[39mencoding,
[1;32m    877[0m             errors[38;5;241m=[39merrors,
[1;32m    878[0m             newline[38;5;241m=[39m[38;5;124m"[39m[38;5;124m"[39m,
[1;32m    879[0m         )
[1;32m    880[0m     [38;5;28;01melse[39;00m:
[1;32m    881[0m         [38;5;66;03m# Binary mode[39;00m
[1;32m    882[0m         handle [38;5;241m=[39m [38;5;28mopen[39m(handle, ioargs[38;5;241m.[39mmode)

[0;31mFileNotFoundError[0m: [Errno 2] No such file or directory: 'Housing.csv'

